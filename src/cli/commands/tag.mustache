{{#isTypeScript}}
import {
    CallableTranslations,
    createCallableTranslations,
    LangTagTranslations,
    LangTagTranslationsConfig
} from 'lang-tag';
{{/isTypeScript}}
{{^isTypeScript}}
import { createCallableTranslations } from 'lang-tag';
{{/isTypeScript}}
{{#isReact}}
import { ReactNode, useMemo } from 'react';
{{/isReact}}

export function {{tagName}}<T extends LangTagTranslations>(
    baseTranslations: T,
    config?: LangTagTranslationsConfig,
) {
    {{#isLibrary}}
    // Library mode - optimized for reusability
    const createTranslations = () => {
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                {{#isReact}}
                return reactProcessPlaceholders(value, params);
                {{/isReact}}
                {{^isReact}}
                return processPlaceholders(value, params);
                {{/isReact}}
            },
        });
    };

    return {
        create: createTranslations,
        Type: {} as CallableTranslations<T>,
    };
    {{/isLibrary}}
    {{^isLibrary}}
    // Application mode - optimized for client/server usage
    const client = () => {
        {{#isReact}}
        return {{#isReact}}useMemo{{/isReact}}(
            () =>
                createCallableTranslations(baseTranslations, config, {
                    transform: ({ value, params }) =>
                        reactProcessPlaceholders(value, params),
                }),
            [],
        );
        {{/isReact}}
        {{^isReact}}
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) =>
                processPlaceholders(value, params),
        });
        {{/isReact}}
    };

    // server side
    const server = () => {
        // TODO: retrieve language from cookies there

        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                {{#isReact}}
                return reactProcessPlaceholders(value, params) as unknown as string;
                {{/isReact}}
                {{^isReact}}
                return processPlaceholders(value, params);
                {{/isReact}}
            },
        });
    };

    return {
        client,
        server,
        Type: {} as CallableTranslations<T>,
    };
    {{/isLibrary}}
}

{{#isReact}}
/**
 * Replaces placeholders in translations with React nodes.
 * Placeholders use the format {{tmpPlaceholder1}}, for example:
 * --- Translation Definition ---
 * const translations = {{tagName}}({ hello: "Hello {{tmpPlaceholder2}}!" });
 * --- Translation ---
 * const t = translations.client();
 * // String parameter:
 * return <div>{ t.hello({ username: "Paul" }) }</div>
 * // ReactNode parameter:
 * return (<div>
 *      <span>{ t.hello({ username: <span className="font-bold">Paul</span> }) }</span>
 * </div>);
 */
export function reactProcessPlaceholders(
    translation: string,
    params?: { [key: string]: ReactNode },
): string {
    if (typeof translation !== 'string') return '';

    const parts: ReactNode[] = [];
    let lastIndex = 0;

    translation.replace(/{{tmpRegex}}/g, (match, placeholder, offset) => {
        if (lastIndex < offset) {
            parts.push(translation.slice(lastIndex, offset));
        }

        const key = placeholder.trim();
        if (params && key in params) {
            parts.push(params[key]);
        } else {
            parts.push('');
        }

        lastIndex = offset + match.length;
        return match;
    });

    if (lastIndex < translation.length) {
        parts.push(translation.slice(lastIndex));
    }

    // If there is no react nodes, return as one string
    if (parts.every(part => typeof part === 'string')) {
        return parts.join('');
    }

    return parts as unknown as string;
}
{{/isReact}}

{{^isReact}}
/**
 * Replaces placeholders in translations with string values.
 * Placeholders use the format {{tmpPlaceholder1}}, for example:
 * const translations = {{tagName}}({ hello: "Hello {{tmpPlaceholder2}}!" });
 * translations.client().hello({ username: "Paul" });
 */
export function processPlaceholders(
    translation: string,
    params?: { [key: string]: string | number },
): string {
    if (typeof translation !== 'string') {
        // As a safeguard, return an empty string if the input is not a string.
        return '';
    }

    return translation.replace(/{{tmpRegex}}/g, (_: any, placeholder: string) => {
        const trimmedPlaceholder = placeholder.trim();
        return params?.[trimmedPlaceholder] !== undefined ? String(params[trimmedPlaceholder]) : '';
    });
}
{{/isReact}}
