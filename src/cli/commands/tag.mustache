{{langTagImport}}
{{reactImport}}

export function {{tagName}}<T extends LangTagTranslations>(
    baseTranslations: T,
    config?: LangTagTranslationsConfig,
) {
    {{#isLibrary}}
    // Library mode - optimized for reusability
    const createTranslations = (inputType?: InputType) => {
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                {{#isReact}}
                return reactProcessPlaceholders(value, params) as unknown as string;
                {{/isReact}}
                {{^isReact}}
                return processPlaceholders(value, params);
                {{/isReact}}
            },
        });
    };

    return {
        create: createTranslations,
        Type: {} as CallableTranslations<T>,
    };
    {{/isLibrary}}
    {{^isLibrary}}
    // Application mode - optimized for client/server usage
    const client = () => {
        {{#isReact}}
        return {{useMemo}}(
            () =>
                createCallableTranslations(baseTranslations, config, {
                    transform: ({ value, params }) =>
                        reactProcessPlaceholders(value, params) as unknown as string,
                }),
            [],
        );
        {{/isReact}}
        {{^isReact}}
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) =>
                processPlaceholders(value, params),
        });
        {{/isReact}}
    };

    // server side
    const server = () => {
        // TODO: retrieve language from cookies there

        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                {{#isReact}}
                return reactProcessPlaceholders(value, params) as unknown as string;
                {{/isReact}}
                {{^isReact}}
                return processPlaceholders(value, params);
                {{/isReact}}
            },
        });
    };

    return {
        client,
        server,
        Type: {} as CallableTranslations<T>,
    };
    {{/isLibrary}}
}

{{#isReact}}
/**
 * Replaces placeholders in translations with React nodes.
 * Placeholders use the format {{key}}, for example:
 * "Hello {{username}}!"
 */
export function reactProcessPlaceholders(
    translation: string,
    params?: { [key: string]: ReactNode },
): ReactNode[] {
    if (typeof translation !== 'string') return [''];

    const parts: ReactNode[] = [];
    let lastIndex = 0;

    translation.replace(/\{\{(.*?)\}\}/g, (match, placeholder, offset) => {
        if (lastIndex < offset) {
            parts.push(translation.slice(lastIndex, offset));
        }

        const key = placeholder.trim();
        if (params && key in params) {
            parts.push(params[key]);
        } else {
            parts.push('');
        }

        lastIndex = offset + match.length;
        return match;
    });

    if (lastIndex < translation.length) {
        parts.push(translation.slice(lastIndex));
    }

    return parts;
}
{{/isReact}}

{{^isReact}}
/**
 * Replaces placeholders in translations with string values.
 * Placeholders use the format {{key}}, for example:
 * "Hello {{username}}!"
 */
export function processPlaceholders(
    translation: string,
    params?: { [key: string]: string | number },
): string {
    if (typeof translation !== 'string') return '';

    return translation.replace(/\{\{(.*?)\}\}/g, (match, placeholder) => {
        const key = placeholder.trim();
        if (params && key in params) {
            return String(params[key]);
        }
        return '';
    });
}
{{/isReact}}
