{{#isTypeScript}}
import {
    CallableTranslations,
    LangTagTranslations,
    LangTagTranslationsConfig,
    createCallableTranslations
} from 'lang-tag';
{{/isTypeScript}}
{{^isTypeScript}}
import { createCallableTranslations } from 'lang-tag';
{{/isTypeScript}}
{{#isReact}}
import React, { ReactNode, useMemo } from 'react';
{{/isReact}}

{{#isTypeScript}}
interface TagConfig extends LangTagTranslationsConfig {
    keep?: 'namespace' | 'path' | 'both'
}
{{/isTypeScript}}
export function {{tagName}}{{#isTypeScript}}<T extends LangTagTranslations>{{/isTypeScript}}(
    baseTranslations{{#isTypeScript}}: T{{/isTypeScript}},
    config{{#isTypeScript}}?: TagConfig{{/isTypeScript}},
) {
    // Example integration with react-i18next:
    // const namespace = config?.namespace || 'common';
    // 
    // // Client
    // const useTranslations = () => {
    // 	const { useTranslation } = require('react-i18next') as typeof import('react-i18next');
    // 	const { t } = useTranslation(namespace);
    //
    // 	return createCallableTranslations(baseTranslations, config, {
    // 		transform: ({ path, params }) => {
    // 			const result = t(path);
    // 			if (result == path) return `#${result}#`;
    // 			return processPlaceholders(result, params);
    // 		},
    // 	});
    // };
    //
    // SSR
    // const initTranslations = async (language?: string) => {
    // 	const { t } = await initT(language || 'en', [namespace]);
    //
    // 	return createCallableTranslations(baseTranslations, config, {
    // 		transform: ({ path, params }) => processPlaceholders(t(path), params),
    // 	});
    // };

    const createTranslations = () => {
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                return processPlaceholders(value, params);
            },
        });
    };

    const client = () => {
        {{#isReact}}
        return useMemo(() => createTranslations(), []);
        {{/isReact}}
        {{^isReact}}
        return createTranslations();
        {{/isReact}}
    };

    const server = () => {
        return createTranslations();
    };

    return {
        client,
        server,
        {{#isTypeScript}}
        Type: {} as CallableTranslations<T>,
        {{/isTypeScript}}
    };
}
