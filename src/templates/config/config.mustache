{{#addComments}}/**
 * Lang Tag CLI Configuration
 * 
 * This file was generated. You can modify it to customize your translation workflow.
 * Documentation: https://github.com/TheTonsOfCode/lang-tag-cli
 */

{{/addComments}}
{{#needsPathBasedImport}}{{#isCJS}}const { pathBasedConfigGenerator{{#useKeeper}}, configKeeper{{/useKeeper}} } = require('@lang-tag/cli/algorithms');{{/isCJS}}{{^isCJS}}import { pathBasedConfigGenerator{{#useKeeper}}, configKeeper{{/useKeeper}} } from '@lang-tag/cli/algorithms';{{/isCJS}}
{{/needsPathBasedImport}}
{{#isDictionary}}{{#isCJS}}const { DictionaryCollector } = require('@lang-tag/cli/algorithms');{{/isCJS}}{{^isCJS}}import { DictionaryCollector } from '@lang-tag/cli/algorithms';{{/isCJS}}
{{/isDictionary}}
{{#importLibraries}}{{#isCJS}}const { flexibleImportAlgorithm } = require('@lang-tag/cli/algorithms');{{/isCJS}}{{^isCJS}}import { flexibleImportAlgorithm } from '@lang-tag/cli/algorithms';{{/isCJS}}
{{/importLibraries}}
{{#needsPathBasedImport}}const generationAlgorithm = pathBasedConfigGenerator({
    ignoreIncludesRootDirectories: true,
    removeBracketedDirectories: true,
    namespaceCase: 'kebab',
    pathCase: 'camel',
    clearOnDefaultNamespace: true,
    ignoreDirectories: ['core', 'utils', 'helpers'],{{#addComments}}
    // Advanced: Use pathRules for hierarchical transformations with ignore and rename
    // pathRules: {
    //     app: {
    //         dashboard: {
    //             _: false,          // ignore "dashboard" but continue with nested rules
    //             modules: false     // also ignore "modules"
    //         },
    //         admin: {
    //             '>': 'management', // rename "admin" to "management"
    //             users: false       // ignore "users",
    //             ui: {
    //                 '>>': {        // 'redirect' - ignore everything, jump to 'ui' namespace and prefix all paths with 'admin'
    //                     namespace: 'ui',
    //                     pathPrefix: 'admin'
    //                 }
    //             }
    //         }
    //     }
    // }{{/addComments}}
});
{{#useKeeper}}const keeper = configKeeper({ propertyName: 'keep' });
{{/useKeeper}}
{{/needsPathBasedImport}}
/** @type {import('@lang-tag/cli/type').LangTagCLIConfig} */
const config = {
    tagName: '{{tagName}}',
    isLibrary: {{isLibrary}},
    includes: [{{includes}}],
    excludes: [{{excludes}}],
    localesDirectory: '{{localesDirectory}}',
    baseLanguageCode: '{{baseLanguageCode}}',
{{#hasConfigGeneration}}{{#usePathBased}}    onConfigGeneration: async event => {
        // We do not modify imported configurations
        if (event.isImportedLibrary) return;
{{#useKeeper}}

        if (event.config?.keep === 'both') return;
{{/useKeeper}}
        
        await generationAlgorithm(event);{{#useKeeper}}
        await keeper(event);{{/useKeeper}}
    },
{{/usePathBased}}{{#useCustom}}    onConfigGeneration: async event => {
        // We do not modify imported configurations
        if (event.isImportedLibrary) return;

        // TODO: Implement your custom config generation logic here
        // event.config = {
        //     namespace: 'your-namespace',
        //     path: 'your.path'
        // };
    },
{{/useCustom}}{{/hasConfigGeneration}}{{#showConfigGenerationComment}}    // onConfigGeneration: async event => {
    //     // Configure how tag configs are generated
    //     // See documentation for available algorithms
    // },
{{/showConfigGenerationComment}}    collect: {
{{#isDictionary}}        collector: new DictionaryCollector(),
{{/isDictionary}}{{^isDictionary}}        defaultNamespace: '{{defaultNamespace}}',
{{/isDictionary}}        onConflictResolution: async event => {
            await event.logger.conflict(event.conflict, true);
            // By default, continue processing even if conflicts occur
            // Call event.exit(); to terminate the process upon the first conflict
        },
        onCollectFinish: event => {
            if (event.conflicts.length) event.exit(); // Stop the process to avoid merging on conflict
        }
    },
{{#importLibraries}}    import: {
        dir: 'src/lang-libraries',
        tagImportPath: 'import { {{tagName}} } from "@/my-lang-tag-path"',
        onImport: flexibleImportAlgorithm({ filePath: { includePackageInPath: true } })
    },
{{/importLibraries}}{{#showImportComment}}    // import: {
    //     dir: 'src/lang-libraries',
    //     tagImportPath: 'import { {{tagName}} } from "@/my-lang-tag-path"',
    //     onImport: flexibleImportAlgorithm({ filePath: { includePackageInPath: true } })
    // },
{{/showImportComment}}    translationArgPosition: 1,
    debug: false,
};

{{#isCJS}}module.exports = config;{{/isCJS}}{{^isCJS}}export default config;{{/isCJS}}
