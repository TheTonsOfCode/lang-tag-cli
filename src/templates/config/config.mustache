/**
 * Lang Tag CLI Configuration
 * 
 * This file was generated. You can modify it to customize your translation workflow.
 * Documentation: https://github.com/TheTonsOfCode/lang-tag-cli
 */

{{#isCJS}}const{{/isCJS}}{{^isCJS}}import{{/isCJS}} {
{{#needsPathBasedImport}}
    pathBasedConfigGenerator,
{{/needsPathBasedImport}}
{{#useKeeper}}
    configKeeper,
{{/useKeeper}}
{{#isDictionary}}
    DictionaryCollector,
{{/isDictionary}}
{{#importLibraries}}
    flexibleImportAlgorithm,
{{/importLibraries}}
} {{#isCJS}}= require('@lang-tag/cli/algorithms');{{/isCJS}}{{^isCJS}}from '@lang-tag/cli/algorithms';{{/isCJS}}
{{#needsPathBasedImport}}

{{>generation-algorithm}}

{{#useKeeper}}
const keeper = configKeeper({ propertyName: 'keep' });

{{/useKeeper}}
{{/needsPathBasedImport}}
/** @type {import('@lang-tag/cli/type').LangTagCLIConfig} */
const config = {
    tagName: '{{tagName}}',
    isLibrary: {{isLibrary}},
    includes: [{{includes}}],
    excludes: [{{excludes}}],
    localesDirectory: '{{localesDirectory}}',
    baseLanguageCode: '{{baseLanguageCode}}',
{{#hasConfigGeneration}}
{{#usePathBased}}
    onConfigGeneration: async event => {
        // We do not modify imported configurations
        if (event.isImportedLibrary) return;
{{#useKeeper}}

        if (event.config?.keep === 'both') return;
{{/useKeeper}}
        
        await generationAlgorithm(event);
{{#useKeeper}}
        await keeper(event);
{{/useKeeper}}
    },
{{/usePathBased}}
{{#useCustom}}
    onConfigGeneration: async event => {
        // We do not modify imported configurations
        if (event.isImportedLibrary) return;

        // TODO: Implement your custom config generation logic here
        // event.config = {
        //     namespace: 'your-namespace',
        //     path: 'your.path'
        // };
    },
{{/useCustom}}
{{/hasConfigGeneration}}
{{#showConfigGenerationComment}}
    // onConfigGeneration: async event => {
    //     // Configure how tag configs are generated
    //     // See documentation for available algorithms
    // },
{{/showConfigGenerationComment}}
    collect: {
{{#isDictionary}}
        collector: new DictionaryCollector(),
{{/isDictionary}}
{{^isDictionary}}
        defaultNamespace: '{{defaultNamespace}}',
{{/isDictionary}}
        onConflictResolution: async event => {
            await event.logger.conflict(event.conflict, true);
            // By default, continue processing even if conflicts occur
            // Call event.exit(); to terminate the process upon the first conflict
        },
        onCollectFinish: event => {
            if (event.conflicts.length) event.exit(); // Stop the process to avoid merging on conflict
        }
    },
{{#importLibraries}}
    import: {
        dir: 'src/lang-libraries',
        tagImportPath: 'import { {{tagName}} } from "@/my-lang-tag-path"',
        onImport: flexibleImportAlgorithm({ filePath: { includePackageInPath: true } })
    },
{{/importLibraries}}
{{#showImportComment}}
    // import: {
    //     dir: 'src/lang-libraries',
    //     tagImportPath: 'import { {{tagName}} } from "@/my-lang-tag-path"',
    //     onImport: flexibleImportAlgorithm({ filePath: { includePackageInPath: true } })
    // },
{{/showImportComment}}
};

{{#isCJS}}module.exports = config;{{/isCJS}}{{^isCJS}}export default config;{{/isCJS}}
