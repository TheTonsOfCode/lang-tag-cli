{{#isTypeScript}}
import {
    CallableTranslations,
    LangTagTranslations,
    LangTagTranslationsConfig,
    createCallableTranslations
} from 'lang-tag';
{{/isTypeScript}}
{{^isTypeScript}}
import { createCallableTranslations } from 'lang-tag';
{{/isTypeScript}}
{{#isReact}}
import React, { ReactNode, useMemo } from 'react';
{{/isReact}}

{{#isTypeScript}}
interface TagConfig extends LangTagTranslationsConfig {
    keep?: 'namespace' | 'path' | 'both'
}
{{/isTypeScript}}
export function {{tagName}}{{#isTypeScript}}<T extends LangTagTranslations>{{/isTypeScript}}(
    baseTranslations{{#isTypeScript}}: T{{/isTypeScript}},
    config{{#isTypeScript}}?: TagConfig{{/isTypeScript}},
) {
    // Example integration with react-i18next:
    // const namespace = config?.namespace || '';
    // 
    // // Client
    // const useT = () => {
    //     const { t } = useTranslation(namespace);
    // 
    //     return createCallableTranslations(translations, config, {
    //         transform: ({ path, params }) => t(path, params),
    //     });
    // };
    // // SSR
    // const initT = async (language?: string) => {
    //     const { t } = await initTranslations({ language, namespaces: [namespace] });
    // 
    //     return createCallableTranslations(translations, config, {
    //         transform: ({ path, params }) => t(path, params),
    //     });
    // };

    const createTranslations = () => {
        return createCallableTranslations(baseTranslations, config, {
            transform: ({ value, params }) => {
                return processPlaceholders(value, params);
            },
        });
    };

    return {
        client: () => {
            {{#isReact}}
            return useMemo(() => createTranslations(), []);
            {{/isReact}}
            {{^isReact}}
            return createTranslations();
            {{/isReact}}
        },
        server: () => {
            return createTranslations();
        },
        {{#isTypeScript}}
        Type: {} as CallableTranslations<T>,
        {{/isTypeScript}}
    };
}
